import json
from aiogram import Bot, Dispatcher, types
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ParseMode
import asyncio
from datetime import datetime, timedelta
import os

TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=TOKEN, parse_mode=ParseMode.HTML)
dp = Dispatcher()

SCHEDULE_FILE = "schedule.json"

def load_schedule():
    try:
        with open(SCHEDULE_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return []

def save_schedule(data):
    with open(SCHEDULE_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

def get_days():
    today = datetime.now()
    return [(today + timedelta(days=i)).strftime("%d.%m.%Y") for i in range(7)]

@dp.message(Command("start"))
async def start(msg: Message):
    await msg.answer("üëã –í—ñ—Ç–∞—é! –Ø –±–æ—Ç –¥–ª—è –∑–∞–ø–∏—Å—É –Ω–∞ —á–µ—Ä–≥—É–≤–∞–Ω–Ω—è –¥–æ –ø–∞—Ü—ñ—î–Ω—Ç–∞ –≤ –ª—ñ–∫–∞—Ä–Ω—ñ.\n\n–ö–æ–º–∞–Ω–¥–∏:\n/–∑–∞–ø–∏—Å ‚Äî –∑–∞–ø–∏—Å–∞—Ç–∏—Å—å –Ω–∞ —á–µ—Ä–≥—É–≤–∞–Ω–Ω—è\n/–≥—Ä–∞—Ñ—ñ–∫ ‚Äî –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –≥—Ä–∞—Ñ—ñ–∫\n/—Å–∫–∞—Å—É–≤–∞—Ç–∏ ‚Äî —Å–∫–∞—Å—É–≤–∞—Ç–∏ —Å–≤—ñ–π –∑–∞–ø–∏—Å")

@dp.message(Command("–≥—Ä–∞—Ñ—ñ–∫"))
async def show_schedule(msg: Message):
    schedule = load_schedule()
    if not schedule:
        await msg.answer("üìÖ –ì—Ä–∞—Ñ—ñ–∫ –ø–æ–∫–∏ –ø–æ—Ä–æ–∂–Ω—ñ–π.")
        return

    text = "<b>–ü–æ—Ç–æ—á–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫ —á–µ—Ä–≥—É–≤–∞–Ω—å:</b>\n\n"
    for entry in schedule:
        text += f"üìÖ {entry['date']} ‚Äî üë§ {entry['user']}\n"
    await msg.answer(text)

@dp.message(Command("–∑–∞–ø–∏—Å"))
async def record(msg: Message):
    user_id = msg.from_user.id
    username = msg.from_user.full_name
    schedule = load_schedule()
    booked_dates = [entry["date"] for entry in schedule]

    buttons = []
    for day in get_days():
        if day not in booked_dates:
            buttons.append([types.KeyboardButton(text=day)])

    if not buttons:
        await msg.answer("üòî –ù–µ–º–∞—î –≤—ñ–ª—å–Ω–∏—Ö –¥–Ω—ñ–≤ –¥–ª—è –∑–∞–ø–∏—Å—É.")
        return

    kb = types.ReplyKeyboardMarkup(keyboard=buttons, resize_keyboard=True, one_time_keyboard=True)
    await msg.answer("–û–±–µ—Ä—ñ—Ç—å –¥–µ–Ω—å –¥–ª—è —á–µ—Ä–≥—É–≤–∞–Ω–Ω—è:", reply_markup=kb)

    @dp.message()
    async def save_day(message: Message):
        selected_day = message.text.strip()
        if selected_day in booked_dates:
            await message.answer("‚ùå –¶–µ–π –¥–µ–Ω—å —É–∂–µ –∑–∞–π–Ω—è—Ç–∏–π.")
        else:
            schedule.append({"date": selected_day, "user": username, "user_id": user_id})
            save_schedule(schedule)
            await message.answer(f"‚úÖ –í–∏ –∑–∞–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ {selected_day}!", reply_markup=types.ReplyKeyboardRemove())

        dp.message.handlers.unregister(save_day)

@dp.message(Command("—Å–∫–∞—Å—É–≤–∞—Ç–∏"))
async def cancel(msg: Message):
    user_id = msg.from_user.id
    schedule = load_schedule()
    new_schedule = [entry for entry in schedule if entry["user_id"] != user_id]

    if len(new_schedule) == len(schedule):
        await msg.answer("‚ùå –í–∏ –Ω–µ –º–∞—î—Ç–µ –∑–∞–ø–∏—Å—ñ–≤ –¥–ª—è —Å–∫–∞—Å—É–≤–∞–Ω–Ω—è.")
    else:
        save_schedule(new_schedule)
        await msg.answer("‚úÖ –í–∞—à –∑–∞–ø–∏—Å —Å–∫–∞—Å–æ–≤–∞–Ω–æ.")

async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())
